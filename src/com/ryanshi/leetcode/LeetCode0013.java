package com.ryanshi.leetcode;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import com.ryanshi.utils.ArrayUtils;

public class LeetCode0013 {

	// 罗马数字包含以下七种字符：I， V， X， L，C，D 和 M。
	//
	// 字符 数值
	// I 1
	// V 5
	// X 10
	// L 50
	// C 100
	// D 500
	// M 1000
	// 例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V +
	// II 。
	//
	// 通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5
	// 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：
	//
	// I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。
	// X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。
	// C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。
	// 给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。
	//
	// 示例 1:
	//
	// 输入: "III"
	// 输出: 3
	// 示例 2:
	//
	// 输入: "IV"
	// 输出: 4
	// 示例 3:
	//
	// 输入: "IX"
	// 输出: 9
	// 示例 4:
	//
	// 输入: "LVIII"
	// 输出: 58
	// 解释: C = 100, L = 50, XXX = 30, III = 3.
	// 示例 5:
	//
	// 输入: "MCMXCIV"
	// 输出: 1994
	// 解释: M = 1000, CM = 900, XC = 90, IV = 4.

	public static void main(String[] args) {
		System.out.println(LeetCode0013.romanToInt("MCMXCIV"));
	}

	public static int romanToInt(String s) {
		final Character str1 = 'I';
		final Character str5 = 'V';
		final Character str10 = 'X';
		final Character str50 = 'L';
		final Character str100 = 'C';
		final Character str500 = 'D';
		final Character str1000 = 'M';

		char[] c = s.toCharArray();
		HashMap<Character, Integer> map = new HashMap<Character, Integer>();

		map.put(str1000, 1000);
		map.put(str500, 500);
		map.put(str100, 100);
		map.put(str50, 50);
		map.put(str10, 10);
		map.put(str5, 5);
		map.put(str1, 1);

		int res = 0;
		int temp = 0; // 临时变量，保存的是当前遍历的上一个数值的值
		int value = 0; // 当前罗马值的大小

		for (int i = c.length-1; i >= 0; i--) {
			value = map.get(c[i]);

			if (temp <= value) {
				res =  res + value;
				temp = value;
			} else {
				res = res-value;
				temp = value;
			}
		}
		return res;

	}
}
